Magic Grid

IDEA :
     Given a grid with each cell consisting of positive, negative or no points i.e, zero points.
     We can move across a cell only if we have positive points ( > 0 ). Whenever we pass
     through a cell, points in that cell are added to our overall points. We need to find
     minimum initial points to reach cell (m-1, n-1) from (0, 0).

     Constraints :
         1. From a cell (i, j) we can move to (i+1, j) or (i, j+1).
         2. We cannot move from (i, j) if your overall points at (i, j) is <= 0.
         3. We have to reach at (n-1, m-1) with minimum positive points i.e., > 0.

         Example:

             Input: points[m][n] = { {-2, -3,   3},
                                     {-5, -10,  1},
                                     {10,  30, -5}
                                   };
             Output: 7

             Explanation:
                 7 is the minimum value to reach destination with
                 positive throughout the path. Below is the path.

                 (0,0) -> (0,1) -> (0,2) -> (1, 2) -> (2, 2)

                 We start from (0, 0) with 7, we reach(0, 1)
                 with 5, (0, 2) with 2, (1, 2) with 5, (2, 2)
                 with and finally we have 1 point (we needed
                 greater than 0 points at the end).


    ALGORITHM :

        We can solve this problem through bottom-up table filling dynamic programing technique.

        1.  To begin with, we should maintain a 2D array dp of the same size as the grid,
            where dp[i][j] represents the minimum points that guarantees the continuation of
            the journey to destination before entering the cell (i, j). It’s but obvious that
            dp[0][0] is our final solution. Hence, for this problem, we need to fill the table
            from the bottom right corner to left top.
        2.  Now, let us decide minimum points needed to leave cell (i, j) (remember we are
            moving from bottom to up). There are only two paths to choose: (i+1, j) and (i, j+1).
            Of course we will choose the cell that the player can finish the rest of his journey
            with a smaller initial points.
            Therefore we have: min_Points_on_exit = min(dp[i+1][j], dp[i][j+1])

        Now we know how to compute min_Points_on_exit, but we need to fill the table dp[][] to
        get the solution in dp[0][0].

        How to compute dp[i][j]?
             The value of dp[i][j] can be written as below.

        dp[i][j] = max(min_Points_on_exit – points[i][j], 1)

        Let us see how above expression covers all cases.
        1.  If points[i][j] == 0, then nothing is gained in this cell; the player can leave the
            cell with the same points as he enters the room with, i.e. dp[i][j] = min_Points_on_exit.
        2.  If points[i][j] < 0, then the player must have points greater than min_Points_on_exit
            before entering (i, j) in order to compensate for the points lost in this cell. The
            minimum amount of compensation is " – points[i][j] ",
            so we have dp[i][j] = min_Points_on_exit – points[i][j].
        3.  If points[i][j] > 0, then the player could enter (i, j) with points as little as
            min_Points_on_exit – points[i][j]. since he could gain “points[i][j]” points in this cell.
            However, the value of min_Points_on_exit – points[i][j] might drop to 0 or below in
            this situation. When this happens, we must clip the value to 1 in order to make
            sure dp[i][j] stays positive:

            dp[i][j] = max(min_Points_on_exit – points[i][j], 1).

        4.  Finally return dp[0][0] which is the answer.

        1.  Create an extra space dp, DP array to store the sub-problems.
        2.  Tackle some basic cases, if the length of the array is 0, print 0, if the length of
            the array is 1, print the first element, if the length of the array is 2, print maximum
            of two elements.
        3.  Update dp[0] as array[0] and dp[1] as maximum of array[0] and array[1]
        4.  Traverse the array from the second element (2nd index) to the end of array.
        5.  For every index, update dp[i] as maximum of dp[i-2] + array[i] and dp[i-1], this step
            defines the two cases, if an element is selected then the previous element cannot be
            selected and if an element is not selected then the previous element can be selected.
        6.  Print the value dp[n-1]


    Complexity Analysis:

        Time Complexity: O(n)     .
            Only one traversal of original array is needed. So the time complexity is O(n)

        Space Complexity: O(n)     .
            An array is required of size n, so space complexity is O(n).
